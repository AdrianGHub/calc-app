{"version":3,"sources":["App.module.css","components/Button/Button.module.css","components/Input/Input.module.css","components/ClearButton/ClearButton.module.css","components/Button/Button.js","components/Input/Input.js","components/ClearButton/ClearButton.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","button","props","value","className","classes","Button","children","isNaN","Operator","join","onClick","handleClick","input","Input","clearButton","ClearButton","handleClear","App","inputValueHandler","setState","state","inputDecValueHandler","indexOf","clearButtonHandler","inputZeroValueHandler","addValueHandler","previousNumber","operator","subtractValueHandler","multiplyValueHandler","divideValueHandler","evalValueHandler","currentNumber","parseFloat","toFixed","CalcWrapper","Row","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.43d96e64.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__18pk_\",\"CalcWrapper\":\"App_CalcWrapper__XQ-dW\",\"Row\":\"App_Row__2oMEM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__njL5v\",\"Operator\":\"Button_Operator__1ImHH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2b8r9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ClearButton\":\"ClearButton_ClearButton__172FF\"};","import React from \"react\";\r\nimport classes from \"../Button/Button.module.css\";\r\n\r\nconst button = (props) => {\r\n\tconst isOperator = (value) => {\r\n\t\treturn !isNaN(value) || value === \".\" || value === \"=\";\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName={[\r\n\t\t\t\tclasses.Button,\r\n\t\t\t\tisOperator(props.children) ? \"\" : classes.Operator,\r\n\t\t\t].join(\" \")}\r\n\t\t\tonClick={() => props.handleClick(props.children)}\r\n\t\t>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default button;\r\n","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    return (\r\n    <div className={classes.Input}>{props.children === \"\" ? 0 : props.children}</div>\r\n    );\r\n};\r\n\r\nexport default input;","import React from 'react';\r\nimport classes from './ClearButton.module.css';\r\n\r\nconst clearButton = (props) => {\r\n    return (\r\n        <div className={classes.ClearButton}\r\n        onClick={() => props.handleClear()}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default clearButton;","import React, { Component } from \"react\";\nimport classes from \"./App.module.css\";\nimport Button from \"./components/Button/Button\";\nimport Input from \"./components/Input/Input\";\nimport ClearButton from \"./components/ClearButton/ClearButton\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n      input: \"\",\n      previousNumber: \"\",\n      currentNumber: \"\",\n      operator: \"\"\n\t\t};\n  }\n  \n  inputValueHandler = (value) => {\n    this.setState({input: this.state.input + value})\n  }\n\n  inputDecValueHandler = (value) => {\n    if(this.state.input.indexOf(\".\") === -1) {\n      this.setState({input: this.state.input + value})\n    }\n  }\n\n  clearButtonHandler = () => {\n    this.setState({input: \"\"});\n  }\n\n  inputZeroValueHandler = (value) => {\n    if (this.state.input !== \"\") {\n      this.setState({input: this.state.input + value})\n    }\n  }\n\n  addValueHandler = () => {\n      this.state.previousNumber = this.state.input;\n      this.setState({input: \"\"})\n      this.state.operator = \"plus\"\n  }\n\n  subtractValueHandler = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({input: \"\"})\n    this.state.operator = \"minus\"\n  }\n\n  multiplyValueHandler = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({input: \"\"})\n    this.state.operator = \"multiply\"\n  }\n\n  divideValueHandler = () => {\n    this.state.previousNumber = this.state.input;\n    this.setState({input: \"\"})\n    this.state.operator = \"divide\"\n  }\n\n\n  evalValueHandler = () => {\n      this.state.currentNumber = this.state.input;\n\n    switch(this.state.operator) {\n      case \"plus\": \n      this.setState({\n        input: (parseFloat(this.state.previousNumber) + parseFloat(this.state.currentNumber)).toFixed(2)})\n        break;\n        case \"minus\": \n      this.setState({\n        input: (parseFloat(this.state.previousNumber) - parseFloat(this.state.currentNumber)).toFixed(2)})\n        break;\n        case \"multiply\": \n      this.setState({\n        input: (parseFloat(this.state.previousNumber) * parseFloat(this.state.currentNumber)).toFixed(2)})\n        break;\n        case \"divide\": \n      this.setState({\n        input: (parseFloat(this.state.previousNumber) / parseFloat(this.state.currentNumber)).toFixed(2)})\n        break;\n        default:\n        this.setState({\n          input: \"Invalid operation\"})\n        break;\n    \n    } \n\n  }\n\n\trender() {\n\t\treturn (\n\t\t\t<div className={classes.App}>\n\t\t\t\t<div className={classes.CalcWrapper}>\n\t\t\t\t\t<div className={classes.Row}>\n\t\t\t\t\t\t<Input>\n            {this.state.input}\n            </Input>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={classes.Row}>\n\t\t\t\t\t\t<Button handleClick={this.inputValueHandler}>7</Button>\n\t\t\t\t\t\t<Button handleClick={this.inputValueHandler}>8</Button>\n\t\t\t\t\t\t<Button handleClick={this.inputValueHandler}>9</Button>\n\t\t\t\t\t\t<Button handleClick={this.divideValueHandler}>/</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={classes.Row}>\n\t\t\t\t\t\t<Button handleClick={this.inputValueHandler}>4</Button>\n\t\t\t\t\t\t<Button handleClick={this.inputValueHandler}>5</Button>\n\t\t\t\t\t\t<Button handleClick={this.inputValueHandler}>6</Button>\n\t\t\t\t\t\t<Button handleClick={this.multiplyValueHandler}>*</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={classes.Row}>\n\t\t\t\t\t\t<Button handleClick={this.inputValueHandler}>3</Button>\n\t\t\t\t\t\t<Button handleClick={this.inputValueHandler}>2</Button>\n\t\t\t\t\t\t<Button handleClick={this.inputValueHandler}>1</Button>\n\t\t\t\t\t\t<Button handleClick={this.addValueHandler}>+</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={classes.Row}>\n\t\t\t\t\t\t<Button handleClick={this.inputDecValueHandler}>.</Button>\n\t\t\t\t\t\t<Button handleClick={this.inputZeroValueHandler}>0</Button>\n\t\t\t\t\t\t<Button handleClick={this.evalValueHandler}>=</Button>\n\t\t\t\t\t\t<Button handleClick={this.subtractValueHandler}>-</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={classes.Row}>\n\t\t\t\t\t\t<ClearButton handleClear={this.clearButtonHandler}>Clear</ClearButton>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}